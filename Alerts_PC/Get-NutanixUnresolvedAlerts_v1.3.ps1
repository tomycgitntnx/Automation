<#
.SYNOPSIS
    Connects to Nutanix Prism Central(s) via the v4 REST API to collect unresolved alerts from
    Prism Element clusters and generates an advanced, color-coded HTML report with a persistent index.

.DESCRIPTION
    The script takes Prism Central (PC) IPs/FQDNs as input and securely prompts for credentials.
    It fetches unresolved alerts from 'cluster' type entities, then generates two HTML files:

    1. A detailed report with a timestamped filename (e.g., Nutanix_Unresolved_Alerts_10-21-2025_11-34-10.html).
       This report includes:
       - A summary index table with alert counts (Critical, Warning, Info) per cluster.
       - Clickable links from the index to each cluster's section.
       - Collapsible sections for each cluster's detailed alert table, expanded by default.
       - A "Back to Top" link in each cluster section.

    2. A master index file (Reports_Index.html) that lists all generated reports,
       grouped by month in collapsible sections.

.PARAMETER PcAddresses
    An array of strings for the IP addresses or FQDNs of the Prism Central instances.

.PARAMETER ReportsDirectory
    Optional. The path to a directory where all reports and the index will be saved.
    Defaults to a "Nutanix_Alert_Reports" folder on your Desktop.

.EXAMPLE
    .\Get-NutanixUnresolvedAlerts.ps1 -PcAddresses "pc1.mydomain.com", "10.0.0.100"

.NOTES
    Author: Tomy Carrasco (Generated by Assistant)
    Date: 2025-Oct-21
    Version: 1.3
    - Compatible with PowerShell 5.1 and later.
    - Generates timestamped reports and a master index file.
    - Adds collapsible sections and a summary index to reports.
#>
function Get-NutanixUnresolvedAlerts {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true)]
        [string[]]$PcAddresses,

        [Parameter(Mandatory = $false)]
        [string]$ReportsDirectory = "$([Environment]::GetFolderPath('Desktop'))\Nutanix_Alert_Reports"
    )

    # --- Script Configuration ---
    # Ensure the reports directory exists
    if (-not (Test-Path -Path $ReportsDirectory)) {
        Write-Host "Creating reports directory at: $ReportsDirectory"
        New-Item -Path $ReportsDirectory -ItemType Directory | Out-Null
    }

    $credential = Get-Credential -Message "Enter Nutanix Prism Central Credentials (e.g., admin)"
    $timestamp = Get-Date -Format "MM_dd_yyyy__HH_mm_ss"
    $outputFile = Join-Path -Path $ReportsDirectory -ChildPath "Nutanix_Unresolved_Alerts_$timestamp.html"
    $indexFile = Join-Path -Path $ReportsDirectory -ChildPath "Reports_Index.html"
    $allAlerts = @()

    # --- PowerShell 5.1 Compatibility & SSL/TLS Handling ---
    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
    add-type @"
    using System.Net;
    using System.Security.Cryptography.X509Certificates;
    public class TrustAllCertsPolicy : ICertificatePolicy {
        public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate, WebRequest request, int certificateProblem) {
            return true;
        }
    }
"@ -ErrorAction SilentlyContinue
    [System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy

    # --- Main Processing Loop ---
    foreach ($pc in $PcAddresses) {
        Write-Host "Connecting to Prism Central: $pc"
        $apiUrl = "https://{0}:9440/api/monitoring/v4.0/serviceability/alerts" -f $pc
        $authHeader = "Basic " + [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(("{0}:{1}" -f $credential.UserName, $credential.GetNetworkCredential().Password)))
        $headers = @{ "Authorization" = $authHeader; "Content-Type"  = "application/json" }
        $filter = "?`$filter=isResolved eq false and sourceEntity/type eq 'cluster'&`$expand=sourceEntity"
        $fullUrl = $apiUrl + $filter

        try {
            $response = Invoke-RestMethod -Uri $fullUrl -Method Get -Headers $headers -ErrorAction Stop
            if ($null -ne $response.data) {
                Write-Host "Successfully retrieved $($response.data.Count) unresolved alerts from $pc."
                $response.data | ForEach-Object {
                    $_ | Add-Member -MemberType NoteProperty -Name "PrismCentral" -Value $pc
                    $allAlerts += $_
                }
            } else { Write-Host "No unresolved alerts from Prism Element clusters found on $pc." }
        } catch { Write-Warning "Failed to retrieve alerts from $pc. Error: $($_.Exception.Message)" }
    }

    # --- HTML Report Generation ---
    if ($allAlerts.Count -eq 0) {
        Write-Host "No unresolved alerts found. No report will be generated."
        return
    }

    Write-Host "Generating HTML report..."

    # --- New: Define JavaScript and advanced CSS for collapsible sections ---
    $head = @"
<style>
    body { font-family: 'Segoe UI', Arial, sans-serif; scroll-behavior: smooth; }
    h1, h2 { color: #003366; }
    table { border-collapse: collapse; width: 100%; margin-bottom: 20px; }
    th, td { border: 1px solid #dddddd; text-align: left; padding: 8px; }
    th { background-color: #f2f2f2; }
    .CRITICAL { background-color: #FFBABA; }
    .WARNING { background-color: #FFF2BA; }
    .INFO { background-color: #BAE1FF; }
    .summary-table { width: 60%; }
    .summary-alerts { white-space: nowrap; }
    .summary-alerts span { display: inline-block; padding: 2px 8px; margin-right: 5px; border-radius: 4px; color: black; }
    .collapsible { background-color: #003366; color: white; cursor: pointer; padding: 12px; width: 100%; border: none; text-align: left; outline: none; font-size: 18px; margin-top: 10px; }
    .collapsible:hover { background-color: #004488; }
    .content { padding: 0 18px; display: block; overflow: hidden; background-color: #f9f9f9; }
    .back-to-top { float: right; font-size: 14px; }
</style>
<script>
    function toggleContent(button) {
        var content = button.nextElementSibling;
        if (content.style.display === "none") {
            content.style.display = "block";
        } else {
            content.style.display = "none";
        }
    }
</script>
"@

    # --- New: Build the Cluster Summary Index ---
    $summaryBody = "<h2 id='top'>Cluster Summary</h2>"
    $summaryBody += "<table class='summary-table'><tr><th>Cluster Name</th><th>Alerts</th></tr>"
    $groupedAlerts = $allAlerts | Group-Object -Property { $_.sourceEntity.name } | Sort-Object Name

    foreach ($group in $groupedAlerts) {
        $clusterName = if ($group.Name) { $group.Name } else { "Unknown Cluster" }
        $sanitizedClusterName = $clusterName -replace '[^a-zA-Z0-9]', ''

        $counts = $group.Group | Group-Object -Property Severity
        $criticalCount = ($counts | Where-Object { $_.Name -eq 'CRITICAL' }).Count | ForEach-Object { if($_) { $_ } else { 0 } }
        $warningCount = ($counts | Where-Object { $_.Name -eq 'WARNING' }).Count | ForEach-Object { if($_) { $_ } else { 0 } }
        $infoCount = ($counts | Where-Object { $_.Name -eq 'INFO' }).Count | ForEach-Object { if($_) { $_ } else { 0 } }

        $summaryBody += "<tr>"
        $summaryBody += "<td><a href='#$sanitizedClusterName'>$clusterName</a></td>"
        $summaryBody += "<td class='summary-alerts'>"
        $summaryBody += "<span class='CRITICAL'>Critical: $criticalCount</span>"
        $summaryBody += "<span class='WARNING'>Warning: $warningCount</span>"
        $summaryBody += "<span class='INFO'>Info: $infoCount</span>"
        $summaryBody += "</td></tr>"
    }
    $summaryBody += "</table><hr>"

    # --- New: Build the Collapsible Detailed Sections ---
    $detailsBody = ""
    foreach ($group in $groupedAlerts) {
        $clusterName = if ($group.Name) { $group.Name } else { "Unknown Cluster" }
        $sanitizedClusterName = $clusterName -replace '[^a-zA-Z0-9]', ''

        # Collapsible button with an anchor ID
        $detailsBody += "<button type='button' class='collapsible' id='$sanitizedClusterName' onclick='toggleContent(this)'>Cluster: $clusterName</button>"
        # Content div for the table
        $detailsBody += "<div class='content'>"
        $detailsBody += "<a href='#top' class='back-to-top'>Back to Top</a>" # Back to top link
        $detailsBody += "<table>"
        $detailsBody += "<tr><th>Severity</th><th>Message</th><th>Source Entity</th><th>Created Time</th><th>Prism Central</th></tr>"

        $sortedGroup = $group.Group | Sort-Object @{Expression={@('CRITICAL', 'WARNING', 'INFO').IndexOf($_.severity)}; Ascending=$true}
        foreach ($alert in $sortedGroup) {
            $severityClass = $alert.severity
            $detailsBody += "<tr class='$severityClass'>"
            $detailsBody += "<td>$($alert.severity)</td>"
            $detailsBody += "<td>$($alert.message)</td>"
            $detailsBody += "<td>$($alert.sourceEntity.name) ($($alert.sourceEntity.type))</td>"
            $detailsBody += "<td>$($alert.createdTimeStamp)</td>"
            $detailsBody += "<td>$($alert.PrismCentral)</td>"
            $detailsBody += "</tr>"
        }
        $detailsBody += "</table></div>"
    }

    # Combine all parts into the final report body
    $finalBody = "<h1>Nutanix Unresolved Alerts Report</h1><p>Generated on: $(Get-Date)</p>" + $summaryBody + $detailsBody
    ConvertTo-Html -Head $head -Body $finalBody | Out-File -FilePath $outputFile
    Write-Host "Report successfully generated at: $outputFile"

    # --- New: Update the Master Index HTML File ---
    Write-Host "Updating master index file: $indexFile"
    $reportFileName = Split-Path -Path $outputFile -Leaf
    $reportDate = Get-Date
    $monthYear = $reportDate.ToString("MMMM yyyy")
    $sanitizedMonthYear = $monthYear -replace '[^a-zA-Z0-9]', ''

    $indexHead = $head # Reuse the same style and script
    $newEntry = "<li><a href='$reportFileName' target='_blank'>$reportFileName</a> (Generated on $($reportDate.ToString("f")))</li>"

    if (Test-Path $indexFile) {
        $indexContent = Get-Content $indexFile -Raw
        # Check if the month section already exists
        if ($indexContent -match "id='$sanitizedMonthYear'") {
            # Inject the new report link into the existing month's list
            $newIndexContent = $indexContent -replace "(<ul id='list-$sanitizedMonthYear'>)", "`$1`n$newEntry"
            $newIndexContent | Out-File $indexFile
        } else {
            # Create a new month section and insert it at the top
            $newMonthSection = @"
<button type='button' class='collapsible' onclick='toggleContent(this)'>$monthYear</button>
<div class='content'>
<ul id='list-$sanitizedMonthYear'>
$newEntry
</ul>
</div>
"@
            $newIndexContent = $indexContent -replace "(<body.*?>)", "`$1`n$newMonthSection"
            $newIndexContent | Out-File $indexFile
        }
    } else {
        # Create a brand new index file
        $indexBody = @"
<h1>Nutanix Alerts Report Index</h1>
<p>List of all generated reports.</p>
<button type='button' class='collapsible' onclick='toggleContent(this)'>$monthYear</button>
<div class='content'>
<ul id='list-$sanitizedMonthYear'>
$newEntry
</ul>
</div>
"@
        ConvertTo-Html -Head $indexHead -Body $indexBody | Out-File $indexFile
    }
    Write-Host "Master index updated successfully."
}

# --- How to Run the Script ---
# 1. Save the script as a .ps1 file.
# 2. Modify and uncomment one of the lines below.
#
# Example 1: Use default report directory on the Desktop
# Get-NutanixUnresolvedAlerts -PcAddresses "192.168.1.10", "pc-secondary.corp.local"
#
# Example 2: Specify a custom directory for reports
# Get-NutanixUnresolvedAlerts -PcAddresses "192.168.1.10" -ReportsDirectory "C:\NutanixReports"
