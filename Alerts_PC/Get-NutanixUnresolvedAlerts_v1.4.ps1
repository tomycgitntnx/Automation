<#
.SYNOPSIS
    Connects to Nutanix Prism Central(s) via the v4 REST API to collect unresolved alerts from
    Prism Element clusters and generates an advanced, color-coded HTML report with a persistent index.

.DESCRIPTION
    The script fetches unresolved alerts from 'cluster' type entities. It can take PC addresses
    directly via the -PcAddresses parameter or from a text file using -PcListFile.

    It securely saves credentials to an encrypted file on first run to automate future logins.

    The script generates two HTML files:
    1. A detailed, timestamped report with a summary index and collapsible sections.
    2. A master index file (Reports_Index.html) organizing all reports by month.

.PARAMETER PcAddresses
    An array of strings for the IP addresses or FQDNs of the Prism Central instances.
    Use this parameter or -PcListFile.

.PARAMETER PcListFile
    The path to a text file containing one Prism Central IP or FQDN per line.
    Use this parameter or -PcAddresses.

.PARAMETER ReportsDirectory
    Optional. The path where reports and the credential file will be saved.
    Defaults to a "Nutanix_Alert_Reports" folder on your Desktop.

.EXAMPLE
    # Example 1: Provide PC addresses directly
    .\Get-NutanixUnresolvedAlerts.ps1 -PcAddresses "pc1.mydomain.com", "10.0.0.100"

    # Example 2: Read PC addresses from a file in the same directory
    .\Get-NutanixUnresolvedAlerts.ps1 -PcListFile ".\clusters.txt"

.NOTES
    Author: Tomy Carrasco (Generated by Assistant)
    Date: 2025-Oct-22
    Version: 1.4
    - Compatible with PowerShell 5.1 and later.
    - Added -PcListFile parameter to read targets from a text file.
    - Added secure credential saving/loading to avoid repeated password entry.
#>
function Get-NutanixUnresolvedAlerts {
    [CmdletBinding(DefaultParameterSetName = 'DirectInput')]
    param (
        [Parameter(Mandatory = $true, ParameterSetName = 'DirectInput', HelpMessage = "An array of PC IP addresses or FQDNs.")]
        [string[]]$PcAddresses,

        [Parameter(Mandatory = $true, ParameterSetName = 'FileInput', HelpMessage = "Path to a text file with one PC address per line.")]
        [string]$PcListFile,

        [Parameter(Mandatory = $false)]
        [string]$ReportsDirectory = "$([Environment]::GetFolderPath('Desktop'))\Nutanix_Alert_Reports"
    )

    # --- Script Configuration ---
    if (-not (Test-Path -Path $ReportsDirectory)) {
        Write-Host "Creating reports directory at: $ReportsDirectory"
        New-Item -Path $ReportsDirectory -ItemType Directory | Out-Null
    }

    $timestamp = Get-Date -Format "MM_dd_yyyy__HH_mm_ss"
    $outputFile = Join-Path -Path $ReportsDirectory -ChildPath "Nutanix_Unresolved_Alerts_$timestamp.html"
    $indexFile = Join-Path -Path $ReportsDirectory -ChildPath "Reports_Index.html"
    $credFile = Join-Path -Path $ReportsDirectory -ChildPath "nutanix.cred"
    $allAlerts = @()

    # --- New: Handle PC Address Input ---
    if ($PsCmdlet.ParameterSetName -eq 'FileInput') {
        if (Test-Path $PcListFile) {
            Write-Host "Reading PC addresses from file: $PcListFile"
            $PcAddresses = Get-Content -Path $PcListFile | Where-Object { $_.Trim() -ne '' }
        } else {
            Write-Error "The specified file was not found: $PcListFile"
            return
        }
    }

    # --- New: Secure Credential Management ---
    if (Test-Path $credFile) {
        Write-Host "Loading saved credentials..."
        try {
            $credential = Import-Clixml -Path $credFile
        } catch {
            Write-Warning "Could not load credentials from $credFile. It may be corrupted or permissions have changed. You will be prompted for new credentials."
            Remove-Item $credFile -ErrorAction SilentlyContinue
        }
    }

    if ($null -eq $credential) {
        $credential = Get-Credential -Message "Enter Nutanix Prism Central Credentials (will be saved securely for future runs)"
        $credential | Export-Clixml -Path $credFile
        Write-Host "Credentials have been saved to $credFile for future use."
    }

    # --- PowerShell 5.1 Compatibility & SSL/TLS Handling ---
    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
    add-type @"
    using System.Net;
    using System.Security.Cryptography.X509Certificates;
    public class TrustAllCertsPolicy : ICertificatePolicy {
        public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate, WebRequest request, int certificateProblem) {
            return true;
        }
    }
"@ -ErrorAction SilentlyContinue
    [System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy

    # --- Main Processing Loop ---
    foreach ($pc in $PcAddresses) {
        Write-Host "Connecting to Prism Central: $pc"
        $apiUrl = "https://{0}:9440/api/monitoring/v4.0/serviceability/alerts" -f $pc
        $authHeader = "Basic " + [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(("{0}:{1}" -f $credential.UserName, $credential.GetNetworkCredential().Password)))
        $headers = @{ "Authorization" = $authHeader; "Content-Type"  = "application/json" }
        $filter = "?`$filter=isResolved eq false and sourceEntity/type eq 'cluster'&`$expand=sourceEntity"
        $fullUrl = $apiUrl + $filter

        try {
            $response = Invoke-RestMethod -Uri $fullUrl -Method Get -Headers $headers -ErrorAction Stop
            if ($null -ne $response.data) {
                Write-Host "Successfully retrieved $($response.data.Count) unresolved alerts from $pc."
                $response.data | ForEach-Object {
                    $_ | Add-Member -MemberType NoteProperty -Name "PrismCentral" -Value $pc
                    $allAlerts += $_
                }
            } else { Write-Host "No unresolved alerts from Prism Element clusters found on $pc." }
        } catch { Write-Warning "Failed to retrieve alerts from $pc. Error: $($_.Exception.Message)" }
    }

    # --- HTML Report Generation ---
    if ($allAlerts.Count -eq 0) {
        Write-Host "No unresolved alerts found. No report will be generated."
        return
    }

    Write-Host "Generating HTML report..."

    $head = @"
<style>
    body { font-family: 'Segoe UI', Arial, sans-serif; scroll-behavior: smooth; }
    h1, h2 { color: #003366; }
    table { border-collapse: collapse; width: 100%; margin-bottom: 20px; }
    th, td { border: 1px solid #dddddd; text-align: left; padding: 8px; }
    th { background-color: #f2f2f2; }
    .CRITICAL { background-color: #FFBABA; }
    .WARNING { background-color: #FFF2BA; }
    .INFO { background-color: #BAE1FF; }
    .summary-table { width: 60%; }
    .summary-alerts { white-space: nowrap; }
    .summary-alerts span { display: inline-block; padding: 2px 8px; margin-right: 5px; border-radius: 4px; color: black; }
    .collapsible { background-color: #003366; color: white; cursor: pointer; padding: 12px; width: 100%; border: none; text-align: left; outline: none; font-size: 18px; margin-top: 10px; }
    .collapsible:hover { background-color: #004488; }
    .content { padding: 0 18px; display: block; overflow: hidden; background-color: #f9f9f9; }
    .back-to-top { float: right; font-size: 14px; }
</style>
<script>
    function toggleContent(button) {
        var content = button.nextElementSibling;
        if (content.style.display === "none") {
            content.style.display = "block";
        } else {
            content.style.display = "none";
        }
    }
</script>
"@

    $summaryBody = "<h2 id='top'>Cluster Summary</h2>"
    $summaryBody += "<table class='summary-table'><tr><th>Cluster Name</th><th>Alerts</th></tr>"
    $groupedAlerts = $allAlerts | Group-Object -Property { $_.sourceEntity.name } | Sort-Object Name

    foreach ($group in $groupedAlerts) {
        $clusterName = if ($group.Name) { $group.Name } else { "Unknown Cluster" }
        $sanitizedClusterName = $clusterName -replace '[^a-zA-Z0-9]', ''

        $counts = $group.Group | Group-Object -Property Severity
        $criticalCount = ($counts | Where-Object { $_.Name -eq 'CRITICAL' }).Count | ForEach-Object { if($_) { $_ } else { 0 } }
        $warningCount = ($counts | Where-Object { $_.Name -eq 'WARNING' }).Count | ForEach-Object { if($_) { $_ } else { 0 } }
        $infoCount = ($counts | Where-Object { $_.Name -eq 'INFO' }).Count | ForEach-Object { if($_) { $_ } else { 0 } }

        $summaryBody += "<tr><td><a href='#$sanitizedClusterName'>$clusterName</a></td><td class='summary-alerts'><span class='CRITICAL'>Critical: $criticalCount</span><span class='WARNING'>Warning: $warningCount</span><span class='INFO'>Info: $infoCount</span></td></tr>"
    }
    $summaryBody += "</table><hr>"

    $detailsBody = ""
    foreach ($group in $groupedAlerts) {
        $clusterName = if ($group.Name) { $group.Name } else { "Unknown Cluster" }
        $sanitizedClusterName = $clusterName -replace '[^a-zA-Z0-9]', ''

        $detailsBody += "<button type='button' class='collapsible' id='$sanitizedClusterName' onclick='toggleContent(this)'>Cluster: $clusterName</button><div class='content'><a href='#top' class='back-to-top'>Back to Top</a><table><tr><th>Severity</th><th>Message</th><th>Source Entity</th><th>Created Time</th><th>Prism Central</th></tr>"

        $sortedGroup = $group.Group | Sort-Object @{Expression={@('CRITICAL', 'WARNING', 'INFO').IndexOf($_.severity)}; Ascending=$true}
        foreach ($alert in $sortedGroup) {
            $detailsBody += "<tr class='$($alert.severity)'><td>$($alert.severity)</td><td>$($alert.message)</td><td>$($alert.sourceEntity.name) ($($alert.sourceEntity.type))</td><td>$($alert.createdTimeStamp)</td><td>$($alert.PrismCentral)</td></tr>"
        }
        $detailsBody += "</table></div>"
    }

    $finalBody = "<h1>Nutanix Unresolved Alerts Report</h1><p>Generated on: $(Get-Date)</p>" + $summaryBody + $detailsBody
    ConvertTo-Html -Head $head -Body $finalBody | Out-File -FilePath $outputFile
    Write-Host "Report successfully generated at: $outputFile"

    # --- Update Master Index HTML File ---
    Write-Host "Updating master index file: $indexFile"
    $reportFileName = Split-Path -Path $outputFile -Leaf
    $reportDate = Get-Date
    $monthYear = $reportDate.ToString("MMMM yyyy")
    $sanitizedMonthYear = $monthYear -replace '[^a-zA-Z0-9]', ''

    $indexHead = $head
    $newEntry = "<li><a href='$reportFileName' target='_blank'>$reportFileName</a> (Generated on $($reportDate.ToString('f')))</li>"

    if (Test-Path $indexFile) {
        $indexContent = Get-Content $indexFile -Raw
        if ($indexContent -match "id='list-$sanitizedMonthYear'") {
            $newIndexContent = $indexContent -replace "(<ul id='list-$sanitizedMonthYear'>)", "`$1`n$newEntry"
            $newIndexContent | Out-File $indexFile
        } else {
            $newMonthSection = "<button type='button' class='collapsible' onclick='toggleContent(this)'>$monthYear</button><div class='content'><ul id='list-$sanitizedMonthYear'>`n$newEntry`n</ul></div>"
            $newIndexContent = $indexContent -replace "(<body.*?>\s*<h1>.*?</h1>\s*<p>.*?</p>)", "`$1`n$newMonthSection"
            $newIndexContent | Out-File $indexFile
        }
    } else {
        $indexBody = "<h1>Nutanix Alerts Report Index</h1><p>List of all generated reports.</p><button type='button' class='collapsible' onclick='toggleContent(this)'>$monthYear</button><div class='content'><ul id='list-$sanitizedMonthYear'>`n$newEntry`n</ul></div>"
        ConvertTo-Html -Head $indexHead -Body $indexBody | Out-File $indexFile
    }
    Write-Host "Master index updated successfully."
}

# --- How to Run the Script ---
# 1. Save this script (e.g., Get-NutanixUnresolvedAlerts.ps1).
# 2. To use a file for PC addresses, create a 'clusters.txt' file with one PC per line.
#
# --- Modify and uncomment one of the examples below ---
#
# Example 1: Read PC addresses directly from the command line
# Get-NutanixUnresolvedAlerts -PcAddresses "192.168.1.10", "pc-secondary.corp.local"
#
# Example 2: Read PC addresses from a file named 'clusters.txt' in the same directory as the script
# Get-NutanixUnresolvedAlerts -PcListFile ".\clusters.txt"
#
# Example 3: Use a file and specify a custom directory for reports and credentials
# Get-NutanixUnresolvedAlerts -PcListFile "C:\Scripts\Inputs\clusters.txt" -ReportsDirectory "C:\NutanixReports"
